import { create } from 'zustand';
import { persist } from 'zustand/middleware';
import { UIState, Toast, Modal, BreadcrumbItem } from '../../types';
import { createPersistentStore } from './utils/persistent-store';

interface UIStore extends UIState {
  // Theme management
  setTheme: (theme: 'light' | 'dark' | 'system') => void;
  toggleTheme: () => void;
  getSystemTheme: () => 'light' | 'dark';
  
  // Layout management
  setSidebarOpen: (open: boolean) => void;
  toggleSidebar: () => void;
  
  // Loading states
  setLoading: (loading: boolean) => void;
  setGlobalLoading: (key: string, loading: boolean) => void;
  clearAllLoading: () => void;
  
  // Toast management
  addToast: (toast: Omit<Toast, 'id'>) => string;
  removeToast: (id: string) => void;
  clearToasts: () => void;
  updateToast: (id: string, updates: Partial<Toast>) => void;
  
  // Modal management
  openModal: (modal: Omit<Modal, 'isOpen'>) => void;
  closeModal: (id: string) => void;
  closeAllModals: () => void;
  updateModal: (id: string, updates: Partial<Modal>) => void;
  
  // Breadcrumb management
  setBreadcrumb: (items: BreadcrumbItem[]) => void;
  addBreadcrumb: (item: BreadcrumbItem) => void;
  removeBreadcrumb: (index: number) => void;
  clearBreadcrumb: () => void;
  
  // Keyboard shortcuts
  enableKeyboardShortcuts: boolean;
  setKeyboardShortcuts: (enabled: boolean) => void;
  
  // Focus management
  focusedElement: string | null;
  setFocusedElement: (elementId: string | null) => void;
  
  // Responsive design helpers
  screenSize: 'mobile' | 'tablet' | 'desktop';
  setScreenSize: (size: 'mobile' | 'tablet' | 'desktop') => void;
  
  // Global loading states for different operations
  loadingStates: Record<string, boolean>;
}

const initialState: UIState = {
  isLoading: false,
  theme: 'system',
  sidebarOpen: true,
  toasts: [],
  modals: [],
  breadcrumb: [],
};

export const useUIStore = create<UIStore>()(
  persist(
    (set, get) => ({
      ...initialState,
      enableKeyboardShortcuts: true,
      focusedElement: null,
      screenSize: 'desktop',
      loadingStates: {},
      
      // Theme management
      setTheme: (theme: 'light' | 'dark' | 'system') => {
        set({ theme });
        
        // Apply theme to document
        if (typeof window !== 'undefined') {
          const root = document.documentElement;
          if (theme === 'system') {
            const systemTheme = get().getSystemTheme();
            root.classList.toggle('dark', systemTheme === 'dark');
          } else {
            root.classList.toggle('dark', theme === 'dark');
          }
        }
      },
      
      toggleTheme: () => {
        const { theme } = get();
        const newTheme = theme === 'light' ? 'dark' : theme === 'dark' ? 'system' : 'light';
        get().setTheme(newTheme);
      },
      
      getSystemTheme: (): 'light' | 'dark' => {
        if (typeof window === 'undefined') return 'light';
        return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
      },
      
      // Layout management
      setSidebarOpen: (open: boolean) => set({ sidebarOpen: open }),
      
      toggleSidebar: () => set((state) => ({ sidebarOpen: !state.sidebarOpen })),
      
      // Loading states
      setLoading: (loading: boolean) => set({ isLoading: loading }),
      
      setGlobalLoading: (key: string, loading: boolean) =>
        set((state) => ({
          loadingStates: {
            ...state.loadingStates,
            [key]: loading,
          },
        })),
      
      clearAllLoading: () => set({ loadingStates: {}, isLoading: false }),
      
      // Toast management
      addToast: (toast: Omit<Toast, 'id'>) => {
        const id = `toast_${Date.now()}_${Math.random().toString(36).slice(2)}`;
        const newToast: Toast = {
          ...toast,
          id,
          duration: toast.duration ?? 5000,
        };
        
        set((state) => ({
          toasts: [...state.toasts, newToast],
        }));
        
        // Auto-remove toast after duration
        if (newToast.duration > 0) {
          setTimeout(() => {
            get().removeToast(id);
          }, newToast.duration);
        }
        
        return id;
      },
      
      removeToast: (id: string) =>
        set((state) => ({
          toasts: state.toasts.filter((toast) => toast.id !== id),
        })),
      
      clearToasts: () => set({ toasts: [] }),
      
      updateToast: (id: string, updates: Partial<Toast>) =>
        set((state) => ({
          toasts: state.toasts.map((toast) =>
            toast.id === id ? { ...toast, ...updates } : toast
          ),
        })),
      
      // Modal management
      openModal: (modal: Omit<Modal, 'isOpen'>) => {
        const newModal: Modal = {
          ...modal,
          isOpen: true,
          size: modal.size ?? 'md',
          closable: modal.closable ?? true,
          onClose: modal.onClose ?? undefined,
        };
        
        set((state) => {
          // Replace modal with same ID or add new one
          const existingIndex = state.modals.findIndex((m) => m.id === modal.id);
          if (existingIndex >= 0) {
            const updatedModals = [...state.modals];
            updatedModals[existingIndex] = newModal;
            return { modals: updatedModals };
          }
          return { modals: [...state.modals, newModal] };
        });
      },
      
      closeModal: (id: string) =>
        set((state) => ({
          modals: state.modals.map((modal) =>
            modal.id === id ? { ...modal, isOpen: false } : modal
          ),
        })),
      
      closeAllModals: () =>
        set((state) => ({
          modals: state.modals.map((modal) => ({ ...modal, isOpen: false })),
        })),
      
      updateModal: (id: string, updates: Partial<Modal>) =>
        set((state) => ({
          modals: state.modals.map((modal) =>
            modal.id === id ? { ...modal, ...updates } : modal
          ),
        })),
      
      // Breadcrumb management
      setBreadcrumb: (items: BreadcrumbItem[]) => set({ breadcrumb: items }),
      
      addBreadcrumb: (item: BreadcrumbItem) =>
        set((state) => ({
          breadcrumb: [...state.breadcrumb, item],
        })),
      
      removeBreadcrumb: (index: number) =>
        set((state) => ({
          breadcrumb: state.breadcrumb.filter((_, i) => i !== index),
        })),
      
      clearBreadcrumb: () => set({ breadcrumb: [] }),
      
      // Keyboard shortcuts
      setKeyboardShortcuts: (enabled: boolean) => set({ enableKeyboardShortcuts: enabled }),
      
      // Focus management
      setFocusedElement: (elementId: string | null) => set({ focusedElement: elementId }),
      
      // Responsive design
      setScreenSize: (size: 'mobile' | 'tablet' | 'desktop') => set({ screenSize: size }),
    }),
    {
      ...createPersistentStore('ui', 1),
      partialize: (state) => ({
        theme: state.theme,
        sidebarOpen: state.sidebarOpen,
        enableKeyboardShortcuts: state.enableKeyboardShortcuts,
      }),
    }
  )
);

// Convenience hooks for common UI operations
export const useToast = () => {
  const addToast = useUIStore((state) => state.addToast);
  
  return {
    success: (title: string, description?: string) =>
      addToast({ type: 'success', title, description }),
    error: (title: string, description?: string) =>
      addToast({ type: 'error', title, description }),
    warning: (title: string, description?: string) =>
      addToast({ type: 'warning', title, description }),
    info: (title: string, description?: string) =>
      addToast({ type: 'info', title, description }),
  };
};

export const useModal = () => {
  const { openModal, closeModal, closeAllModals } = useUIStore();
  
  return {
    open: openModal,
    close: closeModal,
    closeAll: closeAllModals,
    confirm: (options: {
      title: string;
      description: string;
      onConfirm: () => void;
      onCancel?: () => void;
    }) => {
      openModal({
        id: 'confirm-modal',
        title: options.title,
        content: options.description,
        onClose: options.onCancel,
      });
    },
  };
};

// Selectors
export const uiSelectors = {
  theme: (state: UIStore) => state.theme,
  sidebarOpen: (state: UIStore) => state.sidebarOpen,
  toasts: (state: UIStore) => state.toasts,
  modals: (state: UIStore) => state.modals,
  openModals: (state: UIStore) => state.modals.filter((modal) => modal.isOpen),
  breadcrumb: (state: UIStore) => state.breadcrumb,
  isLoading: (state: UIStore) => state.isLoading,
  loadingStates: (state: UIStore) => state.loadingStates,
  isAnyLoading: (state: UIStore) =>
    state.isLoading || Object.values(state.loadingStates).some(Boolean),
  screenSize: (state: UIStore) => state.screenSize,
  isMobile: (state: UIStore) => state.screenSize === 'mobile',
  isTablet: (state: UIStore) => state.screenSize === 'tablet',
  isDesktop: (state: UIStore) => state.screenSize === 'desktop',
};