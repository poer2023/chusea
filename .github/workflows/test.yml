name: Test Suite

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

jobs:
  # 后端测试
  backend-tests:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov pytest-xdist
    
    - name: Set up environment variables
      run: |
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_db" >> $GITHUB_ENV
        echo "REDIS_URL=redis://localhost:6379/0" >> $GITHUB_ENV
        echo "TEST_MODE=true" >> $GITHUB_ENV
    
    - name: Run database migrations
      working-directory: ./backend
      run: |
        alembic upgrade head
    
    - name: Run unit tests
      working-directory: ./backend
      run: |
        pytest tests/ -v --cov=. --cov-report=xml --cov-report=html -n auto
    
    - name: Run integration tests
      working-directory: ./backend
      run: |
        pytest tests/test_*_integration.py -v --maxfail=3
    
    - name: Run API tests
      working-directory: ./backend
      run: |
        pytest tests/test_api_endpoints.py -v
    
    - name: Run performance tests
      working-directory: ./backend
      run: |
        pytest tests/test_performance.py -v --maxfail=1
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage

  # 前端测试
  frontend-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js 20
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/new-frontend/package-lock.json
    
    - name: Install dependencies
      working-directory: ./frontend/new-frontend
      run: npm ci
    
    - name: Run type checking
      working-directory: ./frontend/new-frontend
      run: npm run type-check
    
    - name: Run linting
      working-directory: ./frontend/new-frontend
      run: npm run lint
    
    - name: Run unit tests
      working-directory: ./frontend/new-frontend
      run: npm run test:run
    
    - name: Run unit tests with coverage
      working-directory: ./frontend/new-frontend
      run: npm run test:coverage
    
    - name: Build application
      working-directory: ./frontend/new-frontend
      run: npm run build

  # E2E测试
  e2e-tests:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js 20
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/new-frontend/package-lock.json
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install frontend dependencies
      working-directory: ./frontend/new-frontend
      run: npm ci
    
    - name: Install backend dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Install Playwright
      working-directory: ./frontend/new-frontend
      run: npx playwright install --with-deps
    
    - name: Set up environment variables
      run: |
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_db" >> $GITHUB_ENV
        echo "REDIS_URL=redis://localhost:6379/0" >> $GITHUB_ENV
        echo "TEST_MODE=true" >> $GITHUB_ENV
    
    - name: Run database migrations
      working-directory: ./backend
      run: |
        alembic upgrade head
    
    - name: Start backend server
      working-directory: ./backend
      run: |
        python start_server.py &
        sleep 10
        curl -f http://localhost:8000/health || exit 1
    
    - name: Build and start frontend
      working-directory: ./frontend/new-frontend
      run: |
        npm run build
        npm start &
        sleep 15
        curl -f http://localhost:3000 || exit 1
    
    - name: Run E2E tests
      working-directory: ./frontend/new-frontend
      run: npm run test:e2e
    
    - name: Upload Playwright report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: playwright-report
        path: frontend/new-frontend/playwright-report/
        retention-days: 30

  # 代码质量检查
  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Set up Node.js 20
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/new-frontend/package-lock.json
    
    - name: Install Python dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install black isort flake8 mypy bandit
    
    - name: Install frontend dependencies
      working-directory: ./frontend/new-frontend
      run: npm ci
    
    - name: Run Python code formatting check
      working-directory: ./backend
      run: |
        black --check .
        isort --check-only .
    
    - name: Run Python linting
      working-directory: ./backend
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Run Python type checking
      working-directory: ./backend
      run: mypy . --ignore-missing-imports
    
    - name: Run security analysis
      working-directory: ./backend
      run: bandit -r . -x tests/
    
    - name: Run frontend formatting check
      working-directory: ./frontend/new-frontend
      run: npm run format:check
    
    - name: Run frontend linting
      working-directory: ./frontend/new-frontend
      run: npm run lint

  # 安全扫描
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Check for vulnerable dependencies (Python)
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install safety
        safety check
    
    - name: Check for vulnerable dependencies (Node.js)
      working-directory: ./frontend/new-frontend
      run: npm audit --audit-level high

  # 性能基准测试
  performance-benchmark:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [backend-tests]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-benchmark
    
    - name: Set up environment variables
      run: |
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_db" >> $GITHUB_ENV
        echo "REDIS_URL=redis://localhost:6379/0" >> $GITHUB_ENV
        echo "TEST_MODE=true" >> $GITHUB_ENV
    
    - name: Run database migrations
      working-directory: ./backend
      run: |
        alembic upgrade head
    
    - name: Run performance benchmarks
      working-directory: ./backend
      run: |
        pytest tests/test_performance.py --benchmark-only --benchmark-json=benchmark_results.json
    
    - name: Store benchmark results
      uses: benchmark-action/github-action-benchmark@v1
      with:
        tool: 'pytest'
        output-file-path: backend/benchmark_results.json
        github-token: ${{ secrets.GITHUB_TOKEN }}
        auto-push: true
        comment-on-alert: true
        alert-threshold: '200%'
        fail-on-alert: true